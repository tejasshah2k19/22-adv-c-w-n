
client --> server --> dbServer 


client --> server -->inServer 
                  -->usaServer 

nTier  


tools 

	ide eclipse 
	browser 
	server - apache tomcat 
	db  - mysql 



server -- computer -> jdk jre -> tomcat -> webapp- > war ->bin start

windows 
linux 
mac 

-------------------------------

servlet 

class 

thread?
class A extends Thread{

}

MVC design pattern -> model - view - controller 

controller 
Servlet -> interface 


	Servlet  - servlet-api.jar 
	GenericServlet 
	HttpServlet 
	
1) class extends HttpServlet
2) override -> service
3) web.xml -> mapping   

right click on project -> properties ->java build path -> lib tab ->  add external jar -> browse to the 
apachetomcat/lib -> select servlet-api.jar -> order and export tab -> select all -> apply close -> done 


javax -> 

for each feature / functionality we need to create servlet 





java - html 

jsp -> java server pages , java servlet page 

html + java 


	scriptlet 
	<%
		//scriptlet 
		int a = 10;
		out.print(a + "<Br>");

		Date d = new Date();
		out.print(d);
	%>


	expression 
	<br>
	<%=a%>
	<br>
	<%=d%>
	
	
	
1) <% %> scriptlet 
2) <%=  %> expression
3) <%! %> declaration
	

HTML -> X java -> print ? 
 
servlet -> validation -> error set -> Signup.html -> key get 

servlet -> validation -> error set -> Signup.jsp -> key get 

servlet -> jsp => hard coded -> reqest.setAttribute()

jsp has 9 implicit object -> 1) request 2) out 


js cookie -> access ! 

FrontEnd -> js disable -> 

BackEnd ->  

-------------------
										
										
50		SignupServlet		Server	tomcat	web.xml 		SignupServlet		
				50 request 		SignupServlet 				
										
							1	load class		
							2	create instance	thread	
						1	3	init( )	db open 	Third party api 
						n	4	service( )		
						1	5	destroy() 	db close 	close 


-------------------

icici -> pakistan 


s.jsp -> 500 -> servlet -> 250 | 250 correct -> db 

1) implements Filter 
2) override method
3) web.xml mapping 


filter->folder 
com.filter 
	class RegistrationValidationFilter implements Filter{ //javax.servlet 
			init 
			destroy 
			doFilter(request,response,chain) {
				s.o.p("filter");
			}
	
	}
	
<filter>
	<filter-name>RegistrationValidationFilter</filter-name>
	<filter-class>com.filter.RegistrationValidationFilter</filter-class>
</filter>

<filter-mapping>
	<filter-name>RegistrationValidationFilter</filter-name>
	<url-pattern>/RegistrationServlet</url-pattern>
	<servlet-name>RegistrationServlet</servlet-name>
	<url-pattern>/*</url-pattern>
	<url-pattern>/admin/*</url-pattern>
	
</filter-mapping>


Registration.jsp 
	action="RegistrationServlet" 
	
	submit 



------------------------
jsp -> java servlet page  / java server pages

servlet container / apache tomcat / web server 

.jsp -> 
1) translation   .jsp -> .java 
2) compilation	 .java -> .class 
3) load class
4) create instance
5) jspInit()
6) _jspService()  [ method prfix _ => you are not allowed to override this method ] 
7) jspDestroy()


M : data  -> bean dao 
V : view  -> jsp 
C : controller -> Servlet 

--------------------------------

AddBook.jsp 
	Validation
	directly navigate 
	chrome browser  
			
-----------------------------------------------------------

Signup.jsp -> email ,password submit -> server -> request 

headers 
1) request header**** 
2) response header## 


----------------------------------------------------


1) cookie - client - browser  [ managed by develoer ] 
2) session - server - memory  [ private security ] [ created by server ] 






Login.jsp  [ email password ] 
Signup.jsp  [ firstName email password userId ]

superadmin -> admin@email.com. admin@password 
	admin can add remove update product 
	
users -> {f,e,p,u} * 5 
products -> {productId,name,price,qty }  
 
Login.jsp =>Home , Welcome , RamDev 
 
 	TV 
 	5000
 	AddToCart
 	
 	Iphone 
 	6000
 	AddToCart 
 	
Logout -> Login.jsp
-----------------------------------------------------------------------------------

com 

	bean 
		UserBean {pojo}{java bean}
	controller 
	dao 
		UserDao 
				users 
		ProductDao [ c r u d ]
				products [ image ]
				
ArrayList<UserBean> 


-----------------------------------------------------------------------------------

users -> {f,e,p,userId} * 5 
products -> {productId,name,price,qty}
carts -> cartId , productId , userId , qty , price

cartid  productid   qty  price 		userId 
1		1			2 	1,40,000   	1
2		2			1	55000		1
3		3			1	35000 		1


order  -> orderId , userId , date , status , totalAmount  

orderDetail - >  odetailId, orderId, productId , qty , price  

MyCart 


price : 111111 
checkout 


order| orderdetail  -> add
cart -> remove
  
-----------------------------------------------------------------------------------


 session ->
 	
 	Cookie 
 	HttpSession - > interface 
 	
 	
 	HttpSession session = request.getSession();
 	HttpSession session = request.getSession(true); //default 
 	HttpSession session = request.getSession(false);
 	
 	
 	HttpSession session = request.getSession();
 	session.invalidate();
 	
 	time out ?
 	1) programming -> session.setMaxInactiveInterval(60*5);//second 
 	2) configuration -> web.xml 
 					<session-config> 
 						<session-timeout>5</session-timeout> <!-- minutes -->  
 					</session-config>
 	
 	default -> web.xml -> programming ->
 --------------------------------------------------
 server ->start-> aws | log | googlemap -> connection open 
server ->stop->  aws | log | googlemap -> connection close


 friday  -> server shutdown  
listener -> listen ->event -> act | task 



request 
response
session
XXXXX

implementation:- 
1) XXXListener implements XXX 
2) override : logic 
3) mapping -> web.xml 

---->  5500 user online 
---->  counter -> 4


sessioncreated - ++
sessiondestroyed - -- 

  
------------------------------------------------------------

Scope -> 

1) page    [ X ] 
2) request [ X -> Y ]
3) session [ X -> Y , Z, T , K ] [ user specific ] 
4) application [ X -> Y , Z , T , K ] [ global - common for all users ] 
  
to set the value => setAttribute("key",value)
to read that value = > getAttribute("key") 

-----------------------------------------
	reusable web component- inclusion 
	
1) static inclusion
2) dynamic inclusion 


header.jsp  15line 

A.jsp  10line  
	include header.jsp static 
	25 line 
	
B.jsp 10line 
	include header.jsp dynamic 

-----------------------------------------

EL - expression language 

jsp -> print 

${requestScope.error}
${sessionScope.error}
${error} page - request - session - application 
-----------------------------------------


 
1) 1 2 3 4 5 servlet 
2) servlet.xml 1 2 3 4 5 
3) web.xml -> servlet.xml 

EL function :=
	1) class - logic
	2) .tld 
	3) .xml 
	4) jsp import : use 
-----------------------------------------


 frogetpassword 
 
-----------------------------------------
scope :- page, request ,session, application 
-----------------------------------------
<%int a=90;%>


jstl-> 

java standard tag library  
 
<set>

<out>

<if>

<foreach>

.......


5:->
1) core*** 
2) xml 
3) sql
4) format 
5) function 


1) jstl-jar
2) project link
3) import and use


--------------------

customtag  -- userdefine tag 

1) simple tag 
2) classic tag 


jsp-api.jar 


1) class -> extends SimpleTagSupport 
	logic -> doTag  
2) tld -> tag ->  
3) web.xml -> .tld 
4) jsp use ->import--> 

1)tag with  no body and no attribute

<date>
body 
<b>tejas</b>

empty 
<hr>
<br>


2) tag with attribute 
<sqr num="3"/>
   

 ---------------------------------
 
 classic tag 
 
 interface -> Tag 
 TagSupport class 
 
 1) no body no attribute 
 2) attribute
 3) body 
 4) dynamic attribute*
 5) body - operation 
 6) loop 
 

 
 
--------------------------------
 
 
 
 <c:print count="5">Royal</c:print>
 
 
 
 
 
 
   
 
 
 
 
 
 
 
 
 
 
 
 
 
 






















